// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type iptablesSnoopEventT struct {
	Pid      uint32
	Filename [32]uint8
}

// loadIptablesSnoop returns the embedded CollectionSpec for iptablesSnoop.
func loadIptablesSnoop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_IptablesSnoopBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load iptablesSnoop: %w", err)
	}

	return spec, err
}

// loadIptablesSnoopObjects loads iptablesSnoop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*iptablesSnoopObjects
//	*iptablesSnoopPrograms
//	*iptablesSnoopMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadIptablesSnoopObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadIptablesSnoop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// iptablesSnoopSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iptablesSnoopSpecs struct {
	iptablesSnoopProgramSpecs
	iptablesSnoopMapSpecs
}

// iptablesSnoopSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iptablesSnoopProgramSpecs struct {
	SysEnterExecve *ebpf.ProgramSpec `ebpf:"sys_enter_execve"`
}

// iptablesSnoopMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type iptablesSnoopMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// iptablesSnoopObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadIptablesSnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type iptablesSnoopObjects struct {
	iptablesSnoopPrograms
	iptablesSnoopMaps
}

func (o *iptablesSnoopObjects) Close() error {
	return _IptablesSnoopClose(
		&o.iptablesSnoopPrograms,
		&o.iptablesSnoopMaps,
	)
}

// iptablesSnoopMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadIptablesSnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type iptablesSnoopMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *iptablesSnoopMaps) Close() error {
	return _IptablesSnoopClose(
		m.Events,
	)
}

// iptablesSnoopPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadIptablesSnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type iptablesSnoopPrograms struct {
	SysEnterExecve *ebpf.Program `ebpf:"sys_enter_execve"`
}

func (p *iptablesSnoopPrograms) Close() error {
	return _IptablesSnoopClose(
		p.SysEnterExecve,
	)
}

func _IptablesSnoopClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed iptablessnoop_bpfel.o
var _IptablesSnoopBytes []byte
